diff -u -r a/numpy/core/include/numpy/ndarrayobject.h b/numpy/core/include/numpy/ndarrayobject.h
--- a/numpy/core/include/numpy/ndarrayobject.h	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/include/numpy/ndarrayobject.h	2022-10-05 10:22:29.000000000 +0200
@@ -26,7 +26,7 @@
 #define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type)
 
 #define PyArray_Check(op) PyObject_TypeCheck(op, &PyArray_Type)
-#define PyArray_CheckExact(op) (((PyObject*)(op))->ob_type == &PyArray_Type)
+#define PyArray_CheckExact(op) (Py_TYPE(((PyObject*)(op))) == &PyArray_Type)
 
 #define PyArray_HasArrayInterfaceType(op, type, context, out)                 \
         ((((out)=PyArray_FromStructInterface(op)) != Py_NotImplemented) ||    \
@@ -99,7 +99,7 @@
 #define PyArray_FILLWBYTE(obj, val) memset(PyArray_DATA(obj), val, \
                                            PyArray_NBYTES(obj))
 #ifndef PYPY_VERSION
-#define PyArray_REFCOUNT(obj) (((PyObject *)(obj))->ob_refcnt)
+#define PyArray_REFCOUNT(obj) (Py_REFCNT(((PyObject *)(obj))))
 #define NPY_REFCOUNT PyArray_REFCOUNT
 #endif
 #define NPY_MAX_ELSIZE (2 * NPY_SIZEOF_LONGDOUBLE)
diff -u -r a/numpy/core/include/numpy/npy_3kcompat.h b/numpy/core/include/numpy/npy_3kcompat.h
--- a/numpy/core/include/numpy/npy_3kcompat.h	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/include/numpy/npy_3kcompat.h	2022-10-05 10:22:29.000000000 +0200
@@ -62,9 +62,9 @@
 
 #if PY_VERSION_HEX < 0x030900a4
     /* Introduced in https://github.com/python/cpython/commit/d2ec81a8c99796b51fb8c49b77a7fe369863226f */
-    #define Py_SET_TYPE(obj, typ) (Py_TYPE(obj) = typ)
+    //#define Py_SET_TYPE(obj, typ) (Py_TYPE(obj) = typ)
     /* Introduced in https://github.com/python/cpython/commit/b10dc3e7a11fcdb97e285882eba6da92594f90f9 */
-    #define Py_SET_SIZE(obj, size) (Py_SIZE(obj) = size)
+    //#define Py_SET_SIZE(obj, size) (Py_SIZE(obj) = size)
 #endif
 
 
diff -u -r a/numpy/core/src/common/ufunc_override.c b/numpy/core/src/common/ufunc_override.c
--- a/numpy/core/src/common/ufunc_override.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/common/ufunc_override.c	2022-10-05 10:22:29.000000000 +0200
@@ -73,13 +73,12 @@
 /*
  * Get possible out argument from kwds, and returns the number of outputs
  * contained within it: if a tuple, the number of elements in it, 1 otherwise.
- * The out argument itself is returned in out_kwd_obj, and the outputs
- * in the out_obj array (as borrowed references).
+ * The out argument itself is returned in out_kwd_obj.
  *
  * Returns 0 if no outputs found, -1 if kwds is not a dict (with an error set).
  */
 NPY_NO_EXPORT int
-PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj, PyObject ***out_objs)
+PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj)
 {
     if (kwds == NULL) {
         Py_INCREF(Py_None);
@@ -115,13 +114,11 @@
             *out_kwd_obj = NULL;
             return -1;
         }
-        *out_objs = PySequence_Fast_ITEMS(seq);
         *out_kwd_obj = seq;
         return PySequence_Fast_GET_SIZE(seq);
     }
     else {
-        Py_INCREF(*out_kwd_obj);
-        *out_objs = out_kwd_obj;
+    	*out_kwd_obj = PyTuple_Pack(1, *out_kwd_obj);
         return 1;
     }
 }
diff -u -r a/numpy/core/src/common/ufunc_override.h b/numpy/core/src/common/ufunc_override.h
--- a/numpy/core/src/common/ufunc_override.h	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/common/ufunc_override.h	2022-10-05 10:22:29.000000000 +0200
@@ -33,5 +33,5 @@
  * Returns 0 if no outputs found, -1 if kwds is not a dict (with an error set).
  */
 NPY_NO_EXPORT int
-PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj, PyObject ***out_objs);
+PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj);
 #endif
diff -u -r a/numpy/core/src/multiarray/arrayfunction_override.c b/numpy/core/src/multiarray/arrayfunction_override.c
--- a/numpy/core/src/multiarray/arrayfunction_override.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/multiarray/arrayfunction_override.c	2022-10-05 10:22:29.000000000 +0200
@@ -77,12 +77,11 @@
     Py_ssize_t i;
     int j;
 
-    PyObject **items = PySequence_Fast_ITEMS(relevant_args);
     Py_ssize_t length = PySequence_Fast_GET_SIZE(relevant_args);
 
     for (i = 0; i < length; i++) {
         int new_class = 1;
-        PyObject *argument = items[i];
+        PyObject *argument = PySequence_Fast_GET_ITEM(relevant_args, i);
 
         /* Have we seen this type before? */
         for (j = 0; j < num_implementing_args; j++) {
@@ -164,12 +163,11 @@
     Py_ssize_t j;
     PyObject *implementation, *result;
 
-    PyObject **items = PySequence_Fast_ITEMS(types);
     Py_ssize_t length = PySequence_Fast_GET_SIZE(types);
 
     for (j = 0; j < length; j++) {
         int is_subclass = PyObject_IsSubclass(
-            items[j], (PyObject *)&PyArray_Type);
+            PySequence_Fast_GET_ITEM(types, j), (PyObject *)&PyArray_Type);
         if (is_subclass == -1) {
             return NULL;
         }
diff -u -r a/numpy/core/src/multiarray/common.c b/numpy/core/src/multiarray/common.c
--- a/numpy/core/src/multiarray/common.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/multiarray/common.c	2022-10-05 10:22:29.000000000 +0200
@@ -181,7 +181,6 @@
     PyObject *ip;
     Py_buffer buffer_view;
     /* types for sequence handling */
-    PyObject ** objects;
     PyObject * seq;
     PyTypeObject * common_type;
 
@@ -433,10 +432,9 @@
     /* Recursive case, first check the sequence contains only one type */
     size = PySequence_Fast_GET_SIZE(seq);
     /* objects is borrowed, do not release seq */
-    objects = PySequence_Fast_ITEMS(seq);
-    common_type = size > 0 ? Py_TYPE(objects[0]) : NULL;
+    common_type = size > 0 ? Py_TYPE(PySequence_Fast_GET_ITEM(seq, 0)) : NULL;
     for (i = 1; i < size; ++i) {
-        if (Py_TYPE(objects[i]) != common_type) {
+        if (Py_TYPE(PySequence_Fast_GET_ITEM(seq, i)) != common_type) {
             common_type = NULL;
             break;
         }
@@ -453,7 +451,7 @@
 
     /* Recursive call for each sequence item */
     for (i = 0; i < size; ++i) {
-        int res = PyArray_DTypeFromObjectHelper(objects[i], maxdims - 1,
+        int res = PyArray_DTypeFromObjectHelper(PySequence_Fast_GET_ITEM(seq, i), maxdims - 1,
                                                 out_dtype, string_type);
         if (res < 0) {
             Py_DECREF(seq);
diff -u -r a/numpy/core/src/multiarray/compiled_base.c b/numpy/core/src/multiarray/compiled_base.c
--- a/numpy/core/src/multiarray/compiled_base.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/multiarray/compiled_base.c	2022-10-05 10:22:29.000000000 +0200
@@ -1474,61 +1474,61 @@
     if (docstr == NULL) {
         return NULL;
     }
-
-#define _TESTDOC1(typebase) (Py_TYPE(obj) == &Py##typebase##_Type)
-#define _TESTDOC2(typebase) (Py_TYPE(obj) == Py##typebase##_TypePtr)
-#define _ADDDOC(typebase, doc, name) do {                               \
-        Py##typebase##Object *new = (Py##typebase##Object *)obj;        \
-        if (!(doc)) {                                                   \
-            doc = docstr;                                               \
-        }                                                               \
-        else if (strcmp(doc, docstr) != 0) {                            \
-            PyErr_Format(PyExc_RuntimeError, "%s method %s", name, msg); \
-            return NULL;                                                \
-        }                                                               \
-    } while (0)
-
-    if (_TESTDOC1(CFunction)) {
-        _ADDDOC(CFunction, new->m_ml->ml_doc, new->m_ml->ml_name);
-    }
-    else if (_TESTDOC1(Type)) {
-        _ADDDOC(Type, new->tp_doc, new->tp_name);
-    }
-    else if (_TESTDOC2(MemberDescr)) {
-        _ADDDOC(MemberDescr, new->d_member->doc, new->d_member->name);
-    }
-    else if (_TESTDOC2(GetSetDescr)) {
-        _ADDDOC(GetSetDescr, new->d_getset->doc, new->d_getset->name);
-    }
-    else if (_TESTDOC2(MethodDescr)) {
-        _ADDDOC(MethodDescr, new->d_method->ml_doc, new->d_method->ml_name);
-    }
-    else {
-        PyObject *doc_attr;
-
-        doc_attr = PyObject_GetAttrString(obj, "__doc__");
-        if (doc_attr != NULL && doc_attr != Py_None &&
-                (PyUnicode_Compare(doc_attr, str) != 0)) {
-            if (PyErr_Occurred()) {
-                /* error during PyUnicode_Compare */
-                return NULL;
-            }
-            PyErr_Format(PyExc_RuntimeError, "object %s", msg);
-            return NULL;
-        }
-        Py_XDECREF(doc_attr);
-
-        if (PyObject_SetAttrString(obj, "__doc__", str) < 0) {
-            PyErr_SetString(PyExc_TypeError,
-                            "Cannot set a docstring for that object");
-            return NULL;
-        }
-        Py_RETURN_NONE;
-    }
-
-#undef _TESTDOC1
-#undef _TESTDOC2
-#undef _ADDDOC
+//
+//#define _TESTDOC1(typebase) (Py_TYPE(obj) == &Py##typebase##_Type)
+//#define _TESTDOC2(typebase) (Py_TYPE(obj) == Py##typebase##_TypePtr)
+//#define _ADDDOC(typebase, doc, name) do {                               \
+//        Py##typebase##Object *new = (Py##typebase##Object *)obj;        \
+//        if (!(doc)) {                                                   \
+//            doc = docstr;                                               \
+//        }                                                               \
+//        else if (strcmp(doc, docstr) != 0) {                            \
+//            PyErr_Format(PyExc_RuntimeError, "%s method %s", name, msg); \
+//            return NULL;                                                \
+//        }                                                               \
+//    } while (0)
+//
+//    if (_TESTDOC1(CFunction)) {
+//        _ADDDOC(CFunction, new->m_ml->ml_doc, new->m_ml->ml_name);
+//    }
+//    else if (_TESTDOC1(Type)) {
+//        _ADDDOC(Type, new->tp_doc, new->tp_name);
+//    }
+//    else if (_TESTDOC2(MemberDescr)) {
+//        _ADDDOC(MemberDescr, new->d_member->doc, new->d_member->name);
+//    }
+//    else if (_TESTDOC2(GetSetDescr)) {
+//        _ADDDOC(GetSetDescr, new->d_getset->doc, new->d_getset->name);
+//    }
+//    else if (_TESTDOC2(MethodDescr)) {
+//        _ADDDOC(MethodDescr, new->d_method->ml_doc, new->d_method->ml_name);
+//    }
+//    else {
+//        PyObject *doc_attr;
+//
+//        doc_attr = PyObject_GetAttrString(obj, "__doc__");
+//        if (doc_attr != NULL && doc_attr != Py_None &&
+//                (PyUnicode_Compare(doc_attr, str) != 0)) {
+//            if (PyErr_Occurred()) {
+//                /* error during PyUnicode_Compare */
+//                return NULL;
+//            }
+//            PyErr_Format(PyExc_RuntimeError, "object %s", msg);
+//            return NULL;
+//        }
+//        Py_XDECREF(doc_attr);
+//
+//        if (PyObject_SetAttrString(obj, "__doc__", str) < 0) {
+//            PyErr_SetString(PyExc_TypeError,
+//                            "Cannot set a docstring for that object");
+//            return NULL;
+//        }
+//        Py_RETURN_NONE;
+//    }
+//
+//#undef _TESTDOC1
+//#undef _TESTDOC2
+//#undef _ADDDOC
 
     Py_INCREF(str);
     Py_RETURN_NONE;
diff -u -r a/numpy/core/src/multiarray/dtype_transfer.c b/numpy/core/src/multiarray/dtype_transfer.c
--- a/numpy/core/src/multiarray/dtype_transfer.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/multiarray/dtype_transfer.c	2022-10-05 10:22:29.000000000 +0200
@@ -43,8 +43,8 @@
 #define NPY_DT_DBG_REFTRACE(msg, ref) \
     printf("%-12s %20p %s%d%s\n", msg, ref, \
                         ref ? "(refcnt " : "", \
-                        ref ? (int)ref->ob_refcnt : 0, \
-                        ref ? ((ref->ob_refcnt <= 0) ? \
+                        ref ? (int)Py_REFCNT(ref) : 0, \
+                        ref ? ((Py_REFCNT(ref) <= 0) ? \
                                         ") <- BIG PROBLEM!!!!" : ")") : ""); \
     fflush(stdout);
 #else
diff -u -r a/numpy/core/src/multiarray/iterators.c b/numpy/core/src/multiarray/iterators.c
--- a/numpy/core/src/multiarray/iterators.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/multiarray/iterators.c	2022-10-05 10:22:29.000000000 +0200
@@ -1365,7 +1365,11 @@
         Py_DECREF(fast_seq);
         return multiiter_wrong_number_of_args();
     }
-    ret = multiiter_new_impl(n, PySequence_Fast_ITEMS(fast_seq));
+    PyObject* seq[n];
+    for (int i = 0; i < n; i++) {
+    	seq[i] = PySequence_Fast_GET_ITEM(fast_seq, i);
+    }
+    ret = multiiter_new_impl(n, seq);
     Py_DECREF(fast_seq);
     return ret;
 }
diff -u -r a/numpy/core/src/multiarray/methods.c b/numpy/core/src/multiarray/methods.c
--- a/numpy/core/src/multiarray/methods.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/multiarray/methods.c	2022-10-05 10:22:29.000000000 +0200
@@ -1025,7 +1025,6 @@
     int nin, nout;
     PyObject *out_kwd_obj;
     PyObject *fast;
-    PyObject **in_objs, **out_objs;
 
     /* check inputs */
     nin = PyTuple_Size(args);
@@ -1036,21 +1035,20 @@
     if (fast == NULL) {
         return -1;
     }
-    in_objs = PySequence_Fast_ITEMS(fast);
     for (i = 0; i < nin; ++i) {
-        if (PyUFunc_HasOverride(in_objs[i])) {
+        if (PyUFunc_HasOverride(PySequence_Fast_GET_ITEM(fast, i))) {
             Py_DECREF(fast);
             return 1;
         }
     }
     Py_DECREF(fast);
     /* check outputs, if any */
-    nout = PyUFuncOverride_GetOutObjects(kwds, &out_kwd_obj, &out_objs);
+    nout = PyUFuncOverride_GetOutObjects(kwds, &out_kwd_obj);
     if (nout < 0) {
         return -1;
     }
     for (i = 0; i < nout; i++) {
-        if (PyUFunc_HasOverride(out_objs[i])) {
+        if (PyUFunc_HasOverride(PySequence_Fast_GET_ITEM(out_kwd_obj, i))) {
             Py_DECREF(out_kwd_obj);
             return 1;
         }
@@ -1869,8 +1867,8 @@
         (!PyArray_IS_C_CONTIGUOUS((PyArrayObject*)self) &&
          !PyArray_IS_F_CONTIGUOUS((PyArrayObject*)self)) ||
         PyDataType_FLAGCHK(descr, NPY_ITEM_HASOBJECT) ||
-        (PyType_IsSubtype(((PyObject*)self)->ob_type, &PyArray_Type) &&
-         ((PyObject*)self)->ob_type != &PyArray_Type) ||
+        (PyType_IsSubtype(Py_TYPE(((PyObject*)self)), &PyArray_Type) &&
+         Py_TYPE(((PyObject*)self)) != &PyArray_Type) ||
         descr->elsize == 0) {
         /* The PickleBuffer class from version 5 of the pickle protocol
          * can only be used for arrays backed by a contiguous data buffer.
diff -u -r a/numpy/core/src/umath/_rational_tests.c.src b/numpy/core/src/umath/_rational_tests.c.src
--- a/numpy/core/src/umath/_rational_tests.c.src	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/umath/_rational_tests.c.src	2022-10-05 10:22:29.000000000 +0200
@@ -435,7 +435,7 @@
                 PyErr_Format(PyExc_TypeError,
                         "expected integer %s, got %s",
                         (i ? "denominator" : "numerator"),
-                        x[i]->ob_type->tp_name);
+                        Py_TYPE(x[i])->tp_name);
             }
             return 0;
         }
@@ -453,7 +453,7 @@
             PyErr_Format(PyExc_TypeError,
                     "expected integer %s, got %s",
                     (i ? "denominator" : "numerator"),
-                    x[i]->ob_type->tp_name);
+                    Py_TYPE(x[i])->tp_name);
             return 0;
         }
     }
@@ -743,7 +743,7 @@
         }
         if (!eq) {
             PyErr_Format(PyExc_TypeError,
-                    "expected rational, got %s", item->ob_type->tp_name);
+                    "expected rational, got %s", Py_TYPE(item)->tp_name);
             return -1;
         }
         r = make_rational_int(n);
diff -u -r a/numpy/core/src/umath/extobj.c b/numpy/core/src/umath/extobj.c
--- a/numpy/core/src/umath/extobj.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/umath/extobj.c	2022-10-05 10:22:29.000000000 +0200
@@ -282,7 +282,7 @@
     if (!errmask) {
         return 0;
     }
-    fperr = npy_get_floatstatus_barrier((char*)extobj);
+    fperr = npy_get_floatstatus_barrier((char*)ufunc_name);
     if (!fperr) {
         return 0;
     }
diff -u -r a/numpy/core/src/umath/override.c b/numpy/core/src/umath/override.c
--- a/numpy/core/src/umath/override.c	2022-10-05 10:22:30.000000000 +0200
+++ b/numpy/core/src/umath/override.c	2022-10-05 10:22:29.000000000 +0200
@@ -29,15 +29,13 @@
     int num_override_args = 0;
     int narg, nout = 0;
     PyObject *out_kwd_obj;
-    PyObject **arg_objs, **out_objs;
 
     narg = PyTuple_Size(args);
     if (narg < 0) {
         return -1;
     }
-    arg_objs = PySequence_Fast_ITEMS(args);
 
-    nout = PyUFuncOverride_GetOutObjects(kwds, &out_kwd_obj, &out_objs);
+    nout = PyUFuncOverride_GetOutObjects(kwds, &out_kwd_obj);
     if (nout < 0) {
         return -1;
     }
@@ -48,10 +46,10 @@
         int new_class = 1;
 
         if (i < narg) {
-            obj = arg_objs[i];
+            obj = PySequence_Fast_GET_ITEM(args, i);
         }
         else {
-            obj = out_objs[i - narg];
+            obj = PySequence_Fast_GET_ITEM(args, i - narg);
         }
         /*
          * Have we seen this class before?  If so, ignore.
@@ -76,7 +74,7 @@
                 PyErr_Format(PyExc_TypeError,
                              "operand '%.200s' does not support ufuncs "
                              "(__array_ufunc__=None)",
-                             obj->ob_type->tp_name);
+                             Py_TYPE(obj)->tp_name);
                 Py_DECREF(method);
                 goto fail;
             }

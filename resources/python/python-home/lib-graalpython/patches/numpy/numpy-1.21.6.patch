diff --git a/numpy/core/src/_simd/_simd_convert.inc b/numpy/core/src/_simd/_simd_convert.inc
index 73869ef..e65823b 100644
--- a/numpy/core/src/_simd/_simd_convert.inc
+++ b/numpy/core/src/_simd/_simd_convert.inc
@@ -100,9 +100,8 @@ simd_sequence_from_iterable(PyObject *obj, simd_data_type dtype, Py_ssize_t min_
     if (dst == NULL) {
         return NULL;
     }
-    PyObject **seq_items = PySequence_Fast_ITEMS(seq_obj);
     for (Py_ssize_t i = 0; i < seq_size; ++i) {
-        simd_data data = simd_scalar_from_number(seq_items[i], info->to_scalar);
+        simd_data data = simd_scalar_from_number(PySequence_Fast_GET_ITEM(seq_obj, i), info->to_scalar);
         npyv_lanetype_u8 *sdst = dst + i * info->lane_size;
         memcpy(sdst, &data.u64, info->lane_size);
     }
diff --git a/numpy/core/src/common/ufunc_override.c b/numpy/core/src/common/ufunc_override.c
index d510f18..205c6e4 100644
--- a/numpy/core/src/common/ufunc_override.c
+++ b/numpy/core/src/common/ufunc_override.c
@@ -73,13 +73,12 @@ PyUFunc_HasOverride(PyObject * obj)
 /*
  * Get possible out argument from kwds, and returns the number of outputs
  * contained within it: if a tuple, the number of elements in it, 1 otherwise.
- * The out argument itself is returned in out_kwd_obj, and the outputs
- * in the out_obj array (as borrowed references).
+ * The out argument itself is returned in out_kwd_obj.
  *
  * Returns 0 if no outputs found, -1 if kwds is not a dict (with an error set).
  */
 NPY_NO_EXPORT int
-PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj, PyObject ***out_objs)
+PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj)
 {
     if (kwds == NULL) {
         Py_INCREF(Py_None);
@@ -115,13 +114,11 @@ PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj, PyObject *
             *out_kwd_obj = NULL;
             return -1;
         }
-        *out_objs = PySequence_Fast_ITEMS(seq);
         *out_kwd_obj = seq;
         return PySequence_Fast_GET_SIZE(seq);
     }
     else {
-        Py_INCREF(*out_kwd_obj);
-        *out_objs = out_kwd_obj;
+    	*out_kwd_obj = PyTuple_Pack(1, *out_kwd_obj);
         return 1;
     }
 }
diff --git a/numpy/core/src/common/ufunc_override.h b/numpy/core/src/common/ufunc_override.h
index bf86865..c8a993c 100644
--- a/numpy/core/src/common/ufunc_override.h
+++ b/numpy/core/src/common/ufunc_override.h
@@ -27,11 +27,10 @@ PyUFunc_HasOverride(PyObject *obj);
 /*
  * Get possible out argument from kwds, and returns the number of outputs
  * contained within it: if a tuple, the number of elements in it, 1 otherwise.
- * The out argument itself is returned in out_kwd_obj, and the outputs
- * in the out_obj array (as borrowed references).
+ * The out argument itself is returned in out_kwd_obj.
  *
  * Returns 0 if no outputs found, -1 if kwds is not a dict (with an error set).
  */
 NPY_NO_EXPORT int
-PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj, PyObject ***out_objs);
+PyUFuncOverride_GetOutObjects(PyObject *kwds, PyObject **out_kwd_obj);
 #endif
diff --git a/numpy/core/src/multiarray/array_coercion.c b/numpy/core/src/multiarray/array_coercion.c
index 22050a5..ead7c99 100644
--- a/numpy/core/src/multiarray/array_coercion.c
+++ b/numpy/core/src/multiarray/array_coercion.c
@@ -1093,7 +1093,6 @@ PyArray_DiscoverDTypeAndShape_Recursive(
     }
 
     npy_intp size = PySequence_Fast_GET_SIZE(seq);
-    PyObject **objects = PySequence_Fast_ITEMS(seq);
 
     if (update_shape(curr_dims, &max_dims,
                      out_shape, 1, &size, NPY_TRUE, flags) < 0) {
@@ -1115,7 +1114,7 @@ PyArray_DiscoverDTypeAndShape_Recursive(
     /* Recursive call for each sequence item */
     for (Py_ssize_t i = 0; i < size; i++) {
         max_dims = PyArray_DiscoverDTypeAndShape_Recursive(
-                objects[i], curr_dims + 1, max_dims,
+        		PySequence_Fast_GET_ITEM(seq, i), curr_dims + 1, max_dims,
                 out_descr, out_shape, coercion_cache_tail_ptr, fixed_DType,
                 flags);
 
diff --git a/numpy/core/src/multiarray/arrayfunction_override.c b/numpy/core/src/multiarray/arrayfunction_override.c
index 463a2d4..e235117 100644
--- a/numpy/core/src/multiarray/arrayfunction_override.c
+++ b/numpy/core/src/multiarray/arrayfunction_override.c
@@ -72,12 +72,11 @@ get_implementing_args_and_methods(PyObject *relevant_args,
 {
     int num_implementing_args = 0;
 
-    PyObject **items = PySequence_Fast_ITEMS(relevant_args);
     Py_ssize_t length = PySequence_Fast_GET_SIZE(relevant_args);
 
     for (Py_ssize_t i = 0; i < length; i++) {
         int new_class = 1;
-        PyObject *argument = items[i];
+        PyObject *argument = PySequence_Fast_GET_ITEM(relevant_args, i);
 
         /* Have we seen this type before? */
         for (int j = 0; j < num_implementing_args; j++) {
@@ -156,12 +155,11 @@ NPY_NO_EXPORT PyObject *
 array_function_method_impl(PyObject *func, PyObject *types, PyObject *args,
                            PyObject *kwargs)
 {
-    PyObject **items = PySequence_Fast_ITEMS(types);
     Py_ssize_t length = PySequence_Fast_GET_SIZE(types);
 
     for (Py_ssize_t j = 0; j < length; j++) {
         int is_subclass = PyObject_IsSubclass(
-            items[j], (PyObject *)&PyArray_Type);
+        		PySequence_Fast_GET_ITEM(types, j), (PyObject *)&PyArray_Type);
         if (is_subclass == -1) {
             return NULL;
         }
diff --git a/numpy/core/src/multiarray/arraytypes.c.src b/numpy/core/src/multiarray/arraytypes.c.src
index 7f545d6..1865bb8 100644
--- a/numpy/core/src/multiarray/arraytypes.c.src
+++ b/numpy/core/src/multiarray/arraytypes.c.src
@@ -62,7 +62,7 @@ get_dummy_stack_array(PyArrayObject *orig)
     PyArrayObject_fields new_fields;
     new_fields.flags = PyArray_FLAGS(orig);
     /* Set to NULL so the dummy object can be distinguished from the real one */
-    Py_TYPE(&new_fields) = NULL;
+    Py_SET_TYPE(&new_fields, NULL);
     new_fields.base = (PyObject *)orig;
     return new_fields;
 }
diff --git a/numpy/core/src/multiarray/compiled_base.c b/numpy/core/src/multiarray/compiled_base.c
index cf29cb7..cf7ae87 100644
--- a/numpy/core/src/multiarray/compiled_base.c
+++ b/numpy/core/src/multiarray/compiled_base.c
@@ -1411,78 +1411,78 @@ arr_add_docstring(PyObject *NPY_UNUSED(dummy), PyObject *args)
         return NULL;
     }
 
-#define _ADDDOC(doc, name)                                              \
-        if (!(doc)) {                                                   \
-            doc = docstr;                                               \
-            Py_INCREF(str);  /* hold on to string (leaks reference) */  \
-        }                                                               \
-        else if (strcmp(doc, docstr) != 0) {                            \
-            PyErr_Format(PyExc_RuntimeError, "%s method %s", name, msg); \
-            return NULL;                                                \
-        }
-
-    if (Py_TYPE(obj) == &PyCFunction_Type) {
-        PyCFunctionObject *new = (PyCFunctionObject *)obj;
-        _ADDDOC(PyObject_GetDoc((PyObject*)(new)), new->m_ml->ml_name);
-    }
-    else if (PyObject_TypeCheck(obj, &PyType_Type)) {
-        /*
-         * We add it to both `tp_doc` and `__doc__` here.  Note that in theory
-         * `tp_doc` extracts the signature line, but we currently do not use
-         * it.  It may make sense to only add it as `__doc__` and
-         * `__text_signature__` to the dict in the future.
-         * The dictionary path is only necessary for heaptypes (currently not
-         * used) and metaclasses.
-         * If `__doc__` as stored in `tp_dict` is None, we assume this was
-         * filled in by `PyType_Ready()` and should also be replaced.
-         */
-        PyTypeObject *new = (PyTypeObject *)obj;
-        _ADDDOC(new->tp_doc, new->tp_name);
-        if (new->tp_dict != NULL && PyDict_CheckExact(new->tp_dict) &&
-                PyDict_GetItemString(new->tp_dict, "__doc__") == Py_None) {
-            /* Warning: Modifying `tp_dict` is not generally safe! */
-            if (PyDict_SetItemString(new->tp_dict, "__doc__", str) < 0) {
-                return NULL;
-            }
-        }
-    }
-    else if (Py_TYPE(obj) == &PyMemberDescr_Type) {
-        PyMemberDescrObject *new = (PyMemberDescrObject *)obj;
-        _ADDDOC(new->d_member->doc, new->d_member->name);
-    }
-    else if (Py_TYPE(obj) == &PyGetSetDescr_Type) {
-        PyGetSetDescrObject *new = (PyGetSetDescrObject *)obj;
-        _ADDDOC(new->d_getset->doc, new->d_getset->name);
-    }
-    else if (Py_TYPE(obj) == &PyMethodDescr_Type) {
-        PyMethodDescrObject *new = (PyMethodDescrObject *)obj;
-        _ADDDOC(new->d_method->ml_doc, new->d_method->ml_name);
-    }
-    else {
-        PyObject *doc_attr;
-
-        doc_attr = PyObject_GetAttrString(obj, "__doc__");
-        if (doc_attr != NULL && doc_attr != Py_None &&
-                (PyUnicode_Compare(doc_attr, str) != 0)) {
-            Py_DECREF(doc_attr);
-            if (PyErr_Occurred()) {
-                /* error during PyUnicode_Compare */
-                return NULL;
-            }
-            PyErr_Format(PyExc_RuntimeError, "object %s", msg);
-            return NULL;
-        }
-        Py_XDECREF(doc_attr);
-
-        if (PyObject_SetAttrString(obj, "__doc__", str) < 0) {
-            PyErr_SetString(PyExc_TypeError,
-                            "Cannot set a docstring for that object");
-            return NULL;
-        }
-        Py_RETURN_NONE;
-    }
-
-#undef _ADDDOC
+// #define _ADDDOC(doc, name)                                              \
+//         if (!(doc)) {                                                   \
+//             doc = docstr;                                               \
+//             Py_INCREF(str);  /* hold on to string (leaks reference) */  \
+//         }                                                               \
+//         else if (strcmp(doc, docstr) != 0) {                            \
+//             PyErr_Format(PyExc_RuntimeError, "%s method %s", name, msg); \
+//             return NULL;                                                \
+//         }
+// 
+//     if (Py_TYPE(obj) == &PyCFunction_Type) {
+//         PyCFunctionObject *new = (PyCFunctionObject *)obj;
+//         _ADDDOC(PyObject_GetDoc((PyObject*)(new)), new->m_ml->ml_name);
+//     }
+//     else if (PyObject_TypeCheck(obj, &PyType_Type)) {
+//         /*
+//          * We add it to both `tp_doc` and `__doc__` here.  Note that in theory
+//          * `tp_doc` extracts the signature line, but we currently do not use
+//          * it.  It may make sense to only add it as `__doc__` and
+//          * `__text_signature__` to the dict in the future.
+//          * The dictionary path is only necessary for heaptypes (currently not
+//          * used) and metaclasses.
+//          * If `__doc__` as stored in `tp_dict` is None, we assume this was
+//          * filled in by `PyType_Ready()` and should also be replaced.
+//          */
+//         PyTypeObject *new = (PyTypeObject *)obj;
+//         _ADDDOC(new->tp_doc, new->tp_name);
+//         if (new->tp_dict != NULL && PyDict_CheckExact(new->tp_dict) &&
+//                 PyDict_GetItemString(new->tp_dict, "__doc__") == Py_None) {
+//             /* Warning: Modifying `tp_dict` is not generally safe! */
+//             if (PyDict_SetItemString(new->tp_dict, "__doc__", str) < 0) {
+//                 return NULL;
+//             }
+//         }
+//     }
+//     else if (Py_TYPE(obj) == &PyMemberDescr_Type) {
+//         PyMemberDescrObject *new = (PyMemberDescrObject *)obj;
+//         _ADDDOC(new->d_member->doc, new->d_member->name);
+//     }
+//     else if (Py_TYPE(obj) == &PyGetSetDescr_Type) {
+//         PyGetSetDescrObject *new = (PyGetSetDescrObject *)obj;
+//         _ADDDOC(new->d_getset->doc, new->d_getset->name);
+//     }
+//     else if (Py_TYPE(obj) == &PyMethodDescr_Type) {
+//         PyMethodDescrObject *new = (PyMethodDescrObject *)obj;
+//         _ADDDOC(new->d_method->ml_doc, new->d_method->ml_name);
+//     }
+//     else {
+//         PyObject *doc_attr;
+// 
+//         doc_attr = PyObject_GetAttrString(obj, "__doc__");
+//         if (doc_attr != NULL && doc_attr != Py_None &&
+//                 (PyUnicode_Compare(doc_attr, str) != 0)) {
+//             Py_DECREF(doc_attr);
+//             if (PyErr_Occurred()) {
+//                 /* error during PyUnicode_Compare */
+//                 return NULL;
+//             }
+//             PyErr_Format(PyExc_RuntimeError, "object %s", msg);
+//             return NULL;
+//         }
+//         Py_XDECREF(doc_attr);
+// 
+//         if (PyObject_SetAttrString(obj, "__doc__", str) < 0) {
+//             PyErr_SetString(PyExc_TypeError,
+//                             "Cannot set a docstring for that object");
+//             return NULL;
+//         }
+//         Py_RETURN_NONE;
+//     }
+// 
+// #undef _ADDDOC
 
     Py_RETURN_NONE;
 }
diff --git a/numpy/core/src/multiarray/iterators.c b/numpy/core/src/multiarray/iterators.c
index 576ea89..794f425 100644
--- a/numpy/core/src/multiarray/iterators.c
+++ b/numpy/core/src/multiarray/iterators.c
@@ -1371,7 +1371,11 @@ arraymultiter_new(PyTypeObject *NPY_UNUSED(subtype), PyObject *args,
         Py_DECREF(fast_seq);
         return multiiter_wrong_number_of_args();
     }
-    ret = multiiter_new_impl(n, PySequence_Fast_ITEMS(fast_seq));
+    PyObject* seq[n];
+    for (int i = 0; i < n; i++) {
+    	seq[i] = PySequence_Fast_GET_ITEM(fast_seq, i);
+    }
+    ret = multiiter_new_impl(n, seq);
     Py_DECREF(fast_seq);
     return ret;
 }
diff --git a/numpy/core/src/multiarray/methods.c b/numpy/core/src/multiarray/methods.c
index cdfd6ff..7fd9fd9 100644
--- a/numpy/core/src/multiarray/methods.c
+++ b/numpy/core/src/multiarray/methods.c
@@ -1049,7 +1049,6 @@ any_array_ufunc_overrides(PyObject *args, PyObject *kwds)
     int nin, nout;
     PyObject *out_kwd_obj;
     PyObject *fast;
-    PyObject **in_objs, **out_objs;
 
     /* check inputs */
     nin = PyTuple_Size(args);
@@ -1060,21 +1059,20 @@ any_array_ufunc_overrides(PyObject *args, PyObject *kwds)
     if (fast == NULL) {
         return -1;
     }
-    in_objs = PySequence_Fast_ITEMS(fast);
     for (i = 0; i < nin; ++i) {
-        if (PyUFunc_HasOverride(in_objs[i])) {
+        if (PyUFunc_HasOverride(PySequence_Fast_GET_ITEM(fast, i))) {
             Py_DECREF(fast);
             return 1;
         }
     }
     Py_DECREF(fast);
     /* check outputs, if any */
-    nout = PyUFuncOverride_GetOutObjects(kwds, &out_kwd_obj, &out_objs);
+    nout = PyUFuncOverride_GetOutObjects(kwds, &out_kwd_obj);
     if (nout < 0) {
         return -1;
     }
     for (i = 0; i < nout; i++) {
-        if (PyUFunc_HasOverride(out_objs[i])) {
+        if (PyUFunc_HasOverride(PySequence_Fast_GET_ITEM(out_kwd_obj, i))) {
             Py_DECREF(out_kwd_obj);
             return 1;
         }
diff --git a/numpy/core/src/umath/extobj.c b/numpy/core/src/umath/extobj.c
index cd81f77..f2eade5 100644
--- a/numpy/core/src/umath/extobj.c
+++ b/numpy/core/src/umath/extobj.c
@@ -282,7 +282,7 @@ _check_ufunc_fperr(int errmask, PyObject *extobj, const char *ufunc_name) {
     if (!errmask) {
         return 0;
     }
-    fperr = npy_get_floatstatus_barrier((char*)extobj);
+    fperr = npy_get_floatstatus_barrier((char*)ufunc_name);
     if (!fperr) {
         return 0;
     }

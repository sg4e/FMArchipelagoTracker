diff --git a/src_c/base.c b/src_c/base.c
index e73eb001..6f1c479d 100644
--- a/src_c/base.c
+++ b/src_c/base.c
@@ -25,6 +25,7 @@
 #include "pygame.h"
 
 #include <signal.h>
+#include <string.h>
 #include "doc/pygame_doc.h"
 #include "pgarrinter.h"
 #include "pgcompat.h"
@@ -2022,18 +2023,27 @@ pg_install_parachute(void)
 {
 #ifdef HAVE_SIGNAL_H
     int i;
-    void (*ohandler)(int);
+    struct sigaction act;
 
     if (parachute_installed) {
         return;
     }
     parachute_installed = 1;
 
-    /* Set a handler for any fatal signal not already handled */
+    /* Set a handler for any fatal signal not already handled.
+       Use sigaction to retrieve the current handler first, so
+       we don't mess with signal handlers in multi-threaded
+       runtimes without a GIL. This is still racy, but better
+       than using the signal function. */
     for (i = 0; fatal_signals[i]; ++i) {
-        ohandler = (void (*)(int))signal(fatal_signals[i], pygame_parachute);
-        if (ohandler != SIG_DFL) {
-            signal(fatal_signals[i], ohandler);
+        sigaction(fatal_signals[i], NULL, &act);
+        if (act.sa_handler == SIG_DFL) {
+            memset(&act, 0, sizeof(struct sigaction));
+            sigemptyset(&act.sa_mask);
+            sigaddset(&act.sa_mask, fatal_signals[i]);
+            act.sa_handler = pygame_parachute;
+            act.sa_flags = SA_RESTART;
+            sigaction(fatal_signals[i], &act, NULL);
         }
     }
 

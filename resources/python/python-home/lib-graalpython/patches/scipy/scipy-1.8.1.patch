diff --git a/scipy/__init__.py b/scipy/__init__.py
index f4af2ad8..de3025b3 100644
--- a/scipy/__init__.py
+++ b/scipy/__init__.py
@@ -157,4 +157,4 @@ else:
     del PytestTester
 
     # This makes "from scipy import fft" return scipy.fft, not np.fft
-    del fft
+    # del fft
diff --git a/tools/cythonize.py b/tools/cythonize.py
index 2e0179be..e6d71484 100755
--- a/tools/cythonize.py
+++ b/tools/cythonize.py
@@ -95,24 +95,23 @@ def process_pyx(fromfile, tofile, cwd):
     if tofile.endswith('.cxx'):
         flags += ['--cplus']
 
-    try:
+    try:    
+        from Cython.Compiler.Main import setuptools_main
+        prev_argv = sys.argv[1:]
         try:
-            r = subprocess.call(['cython'] + flags + ["-o", tofile, fromfile], cwd=cwd)
-            if r != 0:
-                raise Exception('Cython failed')
-        except OSError as e:
-            # There are ways of installing Cython that don't result in a cython
-            # executable on the path, see gh-2397.
-            r = subprocess.call([sys.executable, '-c',
-                                 'import sys; from Cython.Compiler.Main import '
-                                 'setuptools_main as main; sys.exit(main())'] + flags +
-                                 ["-o", tofile, fromfile],
-                                cwd=cwd)
-            if r != 0:
-                raise Exception("Cython either isn't installed or it failed.") from e
+            oldcwd = os.getcwd()
+            os.chdir(cwd)
+            sys.argv[1:] = flags + ["-o", tofile, fromfile]
+            retcode = setuptools_main()
+            if retcode:
+                sys.exit(retcode)
+        finally:
+            sys.argv[1:] = prev_argv
+            os.chdir(oldcwd)
     except OSError as e:
         raise OSError('Cython needs to be installed') from e
 
+
 def process_tempita_pyx(fromfile, tofile, cwd):
     try:
         try:
@@ -253,7 +252,7 @@ def find_process_files(root_dir):
     lock = Lock()
 
     try:
-        num_proc = int(os.environ.get('SCIPY_NUM_CYTHONIZE_JOBS', cpu_count()))
+        num_proc = int(os.environ.get('SCIPY_NUM_CYTHONIZE_JOBS', 1))
         pool = Pool(processes=num_proc)
     except ImportError as e:
         # Allow building (single-threaded) on GNU/Hurd, which does not

diff -r -u a/Cython/Build/Dependencies.py b/Cython/Build/Dependencies.py
--- a/Cython/Build/Dependencies.py	2022-06-08 13:35:23.000000000 +0200
+++ b/Cython/Build/Dependencies.py	2022-05-17 18:38:34.000000000 +0200
@@ -1094,6 +1094,8 @@
         progress = progress_fmt.format(i+1, N)
         to_compile[i] = to_compile[i][1:] + (progress,)

+    nthreads = 0 # GraalVM: we don't want to spawn
+
     if N <= 1:
         nthreads = 0
     if nthreads:
diff -r -u a/Cython/Includes/cpython/slice.pxd b/Cython/Includes/cpython/slice.pxd
--- a/Cython/Includes/cpython/slice.pxd	2022-05-17 18:38:34.000000000 +0200
+++ b/Cython/Includes/cpython/slice.pxd	2022-06-15 14:47:43.000000000 +0200
@@ -48,6 +48,13 @@

     int PySlice_Unpack(object slice, Py_ssize_t *start, Py_ssize_t *stop,
                        Py_ssize_t *step) except -1
+
+    object PySlice_Start(object slice)
+
+    object PySlice_Stop(object slice)
+
+    object PySlice_Step(object slice)
+
     # Extract the start, stop and step data members from a slice object as C
     # integers. Silently reduce values larger than PY_SSIZE_T_MAX to
     # PY_SSIZE_T_MAX, silently boost the start and stop values less than
diff -r -u a/Cython/Utility/CythonFunction.c b/Cython/Utility/CythonFunction.c
--- a/Cython/Utility/CythonFunction.c	2022-05-17 18:38:34.000000000 +0200
+++ b/Cython/Utility/CythonFunction.c	2022-06-08 16:51:07.000000000 +0200
@@ -1324,9 +1324,9 @@
         #if PY_VERSION_HEX < 0x03020000
         PyTypeObject *d_type = descr->d_type;
         #else
-        PyTypeObject *d_type = descr->d_common.d_type;
+        PyTypeObject *d_type = PyDescrObject_GetType(method);
         #endif
-        return PyDescr_NewClassMethod(d_type, descr->d_method);
+        return PyDescr_NewClassMethod(d_type, PyMethodDescrObject_GetMethod(method));
     }
 #endif
     else if (PyMethod_Check(method)) {
diff -r -u a/Cython/Utility/ModuleSetupCode.c b/Cython/Utility/ModuleSetupCode.c
--- a/Cython/Utility/ModuleSetupCode.c	2022-05-17 18:38:34.000000000 +0200
+++ b/Cython/Utility/ModuleSetupCode.c	2022-06-14 13:38:35.000000000 +0200
@@ -541,7 +541,7 @@
   #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
 #else
   #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
-  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
+  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
 #endif

 #if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
@@ -717,7 +717,7 @@
 #endif


-#if PY_VERSION_HEX >= 0x030900A4
+#if PY_VERSION_HEX >= 0x030900A4 || GRAALVM_PYTHON
   #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
   #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
 #else
@@ -1026,7 +1026,7 @@
 static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
     #if PY_VERSION_HEX >= 0x030700A1
     static PY_INT64_T main_interpreter_id = -1;
-    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
+    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
     if (main_interpreter_id == -1) {
         main_interpreter_id = current_id;
         return (unlikely(current_id == -1)) ? -1 : 0;
diff -r -u a/Cython/Utility/ObjectHandling.c b/Cython/Utility/ObjectHandling.c
--- a/Cython/Utility/ObjectHandling.c	2022-05-17 18:38:34.000000000 +0200
+++ b/Cython/Utility/ObjectHandling.c	2022-06-08 22:46:01.000000000 +0200
@@ -717,7 +717,7 @@

 /////////////// SliceTupleAndList.proto ///////////////

-#if CYTHON_COMPILING_IN_CPYTHON
+#if 0 // CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
 static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
 #else
@@ -727,7 +727,7 @@

 /////////////// SliceTupleAndList ///////////////

-#if CYTHON_COMPILING_IN_CPYTHON
+#if 0 // CYTHON_COMPILING_IN_CPYTHON
 static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
     Py_ssize_t start = *_start, stop = *_stop, length = *_length;
     if (start < 0) {
@@ -1152,7 +1152,7 @@

 /////////////// SetNameInClass.proto ///////////////

-#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
+#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
 // Identifier names are always interned and have a pre-calculated hash value.
 #define __Pyx_SetNameInClass(ns, name, value) \
     (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
@@ -1201,7 +1201,7 @@
 {
     PyObject *result;
 #if !CYTHON_AVOID_BORROWED_REFS
-#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
+#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
     // Identifier names are always interned and have a pre-calculated hash value.
     result = _PyDict_GetItem_KnownHash($moddict_cname, name, ((PyASCIIObject *) name)->hash);
     __PYX_UPDATE_DICT_CACHE($moddict_cname, result, *dict_cached_value, *dict_version)
@@ -1592,8 +1592,8 @@
     #endif
     {
         PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
-        target->func = descr->d_method->ml_meth;
-        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
+        target->func = PyMethodDescrObject_GetMethod(method)->ml_meth;
+        target->flag = PyMethodDescrObject_GetMethod(method)->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
     }
 #endif
     return 0;
diff -r -u a/Cython/Utility/StringTools.c b/Cython/Utility/StringTools.c
--- a/Cython/Utility/StringTools.c	2022-05-17 18:38:34.000000000 +0200
+++ b/Cython/Utility/StringTools.c	2022-06-13 16:19:21.000000000 +0200
@@ -183,7 +183,7 @@
 //@requires: BytesEquals

 static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
-#if CYTHON_COMPILING_IN_PYPY
+#if 1 //CYTHON_COMPILING_IN_PYPY
     return PyObject_RichCompareBool(s1, s2, equals);
 #else
 #if PY_MAJOR_VERSION < 3
@@ -294,7 +294,7 @@
 //@requires: IncludeStringH

 static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
-#if CYTHON_COMPILING_IN_PYPY
+#if 1 // CYTHON_COMPILING_IN_PYPY
     return PyObject_RichCompareBool(s1, s2, equals);
 #else
     if (s1 == s2) {
